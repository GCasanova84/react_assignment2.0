{"ast":null,"code":"var _jsxFileName = \"/home/gregory/Documentos/react-assignment/react-assignment/src/components/stats/MonthlyStatsPage.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport { MonthlyStatsCard } from \"../ui/MonthlyStatsCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MonthlyStatsPage = () => {\n  _s();\n\n  const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n  const now = Date.now();\n  const currentDate = new Date(now);\n  const currentMonth = currentDate.getMonth();\n  const state = useSelector(state => state);\n  const activitiesPerMonth = [[], [], []];\n  const statsPerMonth = [];\n  state.user.forEach(activity => {\n    const date = new Date(activity.date);\n    const month = date.getMonth();\n    let monthIndex = Math.abs(currentMonth - month);\n\n    if (currentMonth > 1 && monthIndex < 3 || currentMonth < 2 && monthIndex >= 0) {\n      activitiesPerMonth[monthIndex].push(activity);\n    } else {\n      monthIndex = monthIndex + 12;\n      activitiesPerMonth[monthIndex].push(activity);\n    }\n  });\n  activitiesPerMonth.forEach((month, index) => {\n    const distance = month.reduce((a, b) => a + b.distance, 0);\n    const time = month.reduce((a, b) => a + b.time, 0);\n    const elevation_gain = month.reduce((a, b) => a + b.elevation_gain, 0);\n    statsPerMonth.push({\n      index,\n      name: months[currentMonth - index],\n      distance,\n      time,\n      elevation_gain\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"text-center mb-4 mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Estad\\xEDsticas Mensuales\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-3\",\n      children: statsPerMonth.map((stats, index) => {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 8,\n            children: /*#__PURE__*/_jsxDEV(MonthlyStatsCard, {\n              stats: stats\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MonthlyStatsPage, \"dFAAPDNEsxQMpRpiSMZXJjfPktw=\", false, function () {\n  return [useSelector];\n});\n\n_c = MonthlyStatsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonthlyStatsPage\");","map":{"version":3,"sources":["/home/gregory/Documentos/react-assignment/react-assignment/src/components/stats/MonthlyStatsPage.js"],"names":["useSelector","Row","Col","Container","MonthlyStatsCard","MonthlyStatsPage","months","now","Date","currentDate","currentMonth","getMonth","state","activitiesPerMonth","statsPerMonth","user","forEach","activity","date","month","monthIndex","Math","abs","push","index","distance","reduce","a","b","time","elevation_gain","name","map","stats"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport { MonthlyStatsCard } from \"../ui/MonthlyStatsCard\";\n\nexport const MonthlyStatsPage = () => {\n\n    const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n\n    const now = Date.now();\n    const currentDate = new Date(now);\n    const currentMonth = currentDate.getMonth();\n\n    const state = useSelector(state => state);\n\n    const activitiesPerMonth = [[], [], []];\n    const statsPerMonth = [];\n\n    state.user.forEach(activity => {\n        const date = new Date(activity.date);\n        const month = date.getMonth();\n        let monthIndex = Math.abs(currentMonth - month);\n        if ((currentMonth > 1 && monthIndex < 3) || (currentMonth < 2 && monthIndex >= 0)) {\n            activitiesPerMonth[monthIndex].push(activity);\n        } else {\n            monthIndex = monthIndex + 12;\n            activitiesPerMonth[monthIndex].push(activity);\n        }\n    });\n\n    activitiesPerMonth.forEach((month, index) => {\n        const distance = month.reduce((a, b) => a + b.distance, 0);\n        const time = month.reduce((a, b) => a + b.time, 0);\n        const elevation_gain = month.reduce((a, b) => a + b.elevation_gain, 0);\n        statsPerMonth.push({\n            index,\n            name: months[currentMonth - index],\n            distance,\n            time,\n            elevation_gain\n        })\n    })\n\n    return (\n        <>\n            <Row className=\"text-center mb-4 mt-5\">\n                <h1>Estad√≠sticas Mensuales</h1>\n            </Row>\n            <Container className=\"mt-3\">\n                {\n                    statsPerMonth.map((stats, index) => {\n                        return (\n                            <Row className=\"justify-content-md-center mb-3\" key={index}>\n                                <Col md={8}>\n                                    <MonthlyStatsCard stats={stats} />\n                                </Col>\n                            </Row>\n                        )\n                    })\n                }\n            </Container>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}